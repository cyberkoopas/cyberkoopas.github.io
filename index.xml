<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CyberKoopas</title>
    <link>https://www.cyberkoopas.fr/</link>
    <description>Recent content on CyberKoopas</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 06 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.cyberkoopas.fr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PwnMe 2600] Web - Netsapp</title>
      <link>https://www.cyberkoopas.fr/posts/pwnme/nestapp/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/pwnme/nestapp/</guid>
      <description>Challenge information </description>
    </item>
    
    <item>
      <title>[Midnight qualif] Crypto - M4g1c</title>
      <link>https://www.cyberkoopas.fr/posts/midnight/m4g1c/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/midnight/m4g1c/</guid>
      <description>Challenge information Summary A file has been encrypted and we have access to the encryption algorithm.
Attached files encrypt.py import sys import os def get_key(length): return os.urandom(length) def encrypt(filename, key): filename_lock = filename + &amp;#34;.lock&amp;#34; data = open(filename, &amp;#34;rb&amp;#34;).read() os.remove(filename) locked = open(filename_lock, &amp;#34;wb&amp;#34;) for idx, i in enumerate(data): locked.write((i ^ key[idx % len(key)]).to_bytes(1, &amp;#34;big&amp;#34;)) if __name__ == &amp;#39;__main__&amp;#39;: if len(sys.argv) != 2: print(f&amp;#34;Usage: {sys.argv[0]} &amp;lt;file to cipher&amp;gt;&amp;#34;) exit(0) else: key = get_key(12) encrypt(sys.</description>
    </item>
    
    <item>
      <title>[Hackday qualif] Crypto - Trusted 2</title>
      <link>https://www.cyberkoopas.fr/posts/hackday-qualification/trusted2/</link>
      <pubDate>Mon, 13 Mar 2023 01:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/hackday-qualification/trusted2/</guid>
      <description>Challenge information Summary Following the leak of an important database in the Sagittarius sector, it has been decided to rework the whole security of the information system. Make sure that the authentication portal is this time secured as it should be.
Attached files server.py #!/usr/bin/env python3 import hashlib from random import randrange from ecdsa import NIST256p, ecdsa G = NIST256p.generator order = G.order() priv = randrange(1, order) pub = G * priv pub = ecdsa.</description>
    </item>
    
    <item>
      <title>[Hackday qualif] Crypto - Trusted</title>
      <link>https://www.cyberkoopas.fr/posts/hackday-qualification/trusted/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/hackday-qualification/trusted/</guid>
      <description>Challenge information Summary The situation is bad. The magistrate database from the Sagittarius sector has been leaked! The incident response team continues to see unknown connections in the logs from outside the sector, even though the passwords have all been changed. We suspect the problem is with the authentication portal&amp;hellip; Do something about it!
Attached files server.py #!/usr/bin/env python3 import hashlib from random import randbytes def MAC(msg, key): return hashlib.sha256(key + msg).</description>
    </item>
    
    <item>
      <title>[DaVinciCTF] Crypto - XOR Vigenere</title>
      <link>https://www.cyberkoopas.fr/posts/dvctf/xor_vigenere/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/dvctf/xor_vigenere/</guid>
      <description>Challenge information Summary Context : Leonard forgot to tell you the key he used to encrypt his message.
Would you be able to recover the message he sent you ?
Flag format: dvCTF{REDACTED} found in the message
Attached files messageolution Firstly, we can convert the ASCII message file to a binary file (message.bin). It&amp;rsquo;s possible with CyberChef. Select operation From Binary and download file. Cyberchef parameters :
Delimiter: None Byte Length : 8 We know the flag format is dvCTF{REDACTED}, we can perform a XOR Known plaintext attack.</description>
    </item>
    
    <item>
      <title>[DaVinciCTF] Programming - Principiante</title>
      <link>https://www.cyberkoopas.fr/posts/dvctf/principiante/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.cyberkoopas.fr/posts/dvctf/principiante/</guid>
      <description>Challenge information Summary You have to give the correct answer 12 times in a row with a 1s timeout between each answer. Base keyboard is :
_____________________________ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |_| |_| | |_| |_| |_| | | | | | | | | | | | | | | | | | |___|___|___|___|___|___|___| Examples of expected answers :</description>
    </item>
    
    
  </channel>
</rss>
